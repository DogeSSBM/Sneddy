!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	Types.h	36;"	d
BLACK	Colors.h	/^const Color BLACK		= {0x00, 0x00, 0x00, 0xFF};$/;"	v
BLEND_ADD	Types.h	47;"	d
BLEND_ALPHA	Types.h	46;"	d
BLEND_MOD	Types.h	48;"	d
BLEND_NONE	Types.h	45;"	d
BLUE	Colors.h	/^const Color BLUE 		= {0x00, 0x00, 0xFF, 0xFF};$/;"	v
BORDERLESS	Types.h	/^	BORDERLESS	=		SDL_WINDOW_FULLSCREEN_DESKTOP,$/;"	e	enum:__anon1
BlendMode	Types.h	/^typedef SDL_BlendMode		BlendMode;$/;"	t
CCf	Vec.h	/^Coordf CCf(const Coord coord)$/;"	f
CYAN	Colors.h	/^const Color CYAN		= {0x00, 0xFF, 0xFF, 0xFF};$/;"	v
CfC	Vec.h	/^Coord CfC(const Coordf coordf)$/;"	f
Color	Types.h	/^typedef SDL_Color 		Color;$/;"	t
Coord	Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon2
CoordPair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon7
Coordf	Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon13
DIR_D	Types.h	/^	DIR_D = 0b10,$/;"	e	enum:__anon15
DIR_L	Types.h	/^	DIR_L = 0b11$/;"	e	enum:__anon15
DIR_R	Types.h	/^	DIR_R = 0b01,$/;"	e	enum:__anon15
DIR_U	Types.h	/^	DIR_U = 0b00,$/;"	e	enum:__anon15
Direction	Types.h	/^}Direction;$/;"	t	typeref:enum:__anon15
DirectionChar	Types.h	/^const char DirectionChar[4] = {'U', 'R', 'D', 'L'};$/;"	v
Event	Types.h	/^typedef SDL_Event			Event;$/;"	t
FPS	Timing.h	3;"	d
FULLSCREEN	Types.h	/^	FULLSCREEN	=		SDL_WINDOW_FULLSCREEN,$/;"	e	enum:__anon1
File	Types.h	/^typedef FILE			File;$/;"	t
GREEN	Colors.h	/^const Color GREEN 	= {0x00, 0xFF, 0x00, 0xFF};$/;"	v
GREY	Colors.h	/^const Color GREY		= {0x80, 0x80, 0x80, 0xFF};$/;"	v
GREY1	Colors.h	/^const Color GREY1		= {0xAA, 0xAA, 0xAA, 0xFF};$/;"	v
GREY2	Colors.h	/^const Color GREY2		= {0x7E, 0x7E, 0x7E, 0xFF};$/;"	v
GREY3	Colors.h	/^const Color GREY3		= {0x52, 0x52, 0x52, 0xFF};$/;"	v
I16MAX	Types.h	25;"	d
I16MIN	Types.h	24;"	d
I32MAX	Types.h	27;"	d
I32MIN	Types.h	26;"	d
I64MAX	Types.h	29;"	d
I64MIN	Types.h	28;"	d
I8MAX	Types.h	23;"	d
I8MIN	Types.h	22;"	d
Img	Types.h	/^typedef SDL_Surface 		Img;$/;"	t
Key	Types.h	/^typedef SDL_Keycode 		Key;$/;"	t
Length	Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon2
LengthPair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon7
Lengthf	Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon13
MAGENTA	Colors.h	/^const Color MAGENTA	= {0xFF, 0x00, 0xFF, 0xFF};$/;"	v
MOUSE_B	Input.h	32;"	d
MOUSE_F	Input.h	31;"	d
MOUSE_L	Input.h	28;"	d
MOUSE_M	Input.h	29;"	d
MOUSE_R	Input.h	30;"	d
MW_D	Input.h	34;"	d
MW_L	Input.h	37;"	d
MW_R	Input.h	35;"	d
MW_U	Input.h	36;"	d
Offset	Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon2
OffsetPair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon7
Offsetf	Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon13
PI	Types.h	50;"	d
PINK	Colors.h	/^const Color PINK		= {0xFF, 0xC0, 0xCB, 0xFF};$/;"	v
Poly	Poly.h	/^}Poly;$/;"	t	typeref:struct:__anon21
RED	Colors.h	/^const Color RED 		= {0xFF, 0x00, 0x00, 0xFF};$/;"	v
Range	Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon2
RangePair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon7
Rangef	Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon13
Ratio	Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon2
Rect	Types.h	/^typedef SDL_Rect 			Rect;$/;"	t
TB_create	Text.h	/^TextBox* TB_create(uint x, uint y, const char* text)$/;"	f
TB_destroy	Text.h	/^void TB_destroy(TextBox *tb)$/;"	f
TB_draw	Text.h	/^void TB_draw(TextBox *tb)$/;"	f
TB_setText	Text.h	/^void TB_setText(TextBox *tb, const char *text)$/;"	f
TB_setTextSize	Text.h	/^void TB_setTextSize(TextBox *tb, int size)$/;"	f
TPF	Timing.h	4;"	d
TPS	Timing.h	2;"	d
TextBox	Text.h	/^}TextBox;$/;"	t	typeref:struct:__anon20
Ticks	Types.h	/^typedef unsigned int		Ticks;$/;"	t
Time	Types.h	/^typedef time_t			Time;$/;"	t
U16MAX	Types.h	32;"	d
U32MAX	Types.h	33;"	d
U64MAX	Types.h	34;"	d
U8MAX	Types.h	31;"	d
Vectorf	Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon13
WHITE	Colors.h	/^const Color WHITE		= {0xFF, 0xFF, 0xFF, 0xFF};$/;"	v
WINDOWED	Types.h	/^	WINDOWED	=		0$/;"	e	enum:__anon1
WindowMode	Types.h	/^}WindowMode;$/;"	t	typeref:enum:__anon1
YELLOW	Colors.h	/^const Color YELLOW	= {0xFF, 0xFF, 0x00, 0xFF};$/;"	v
ZFLOOR	Types.h	37;"	d
arr	Types.h	/^	Coord arr[2];$/;"	m	union:__anon7
arr	Types.h	/^	float arr[2];$/;"	m	union:__anon13
arr	Types.h	/^	int arr[2];$/;"	m	union:__anon2
backColor	Text.h	/^	Color backColor;$/;"	m	struct:__anon20
bezier	Graphics.h	/^void bezier(const Coord *pos, const uint numc, const uint nums)$/;"	f
c1	Types.h	/^		Coord c1;$/;"	m	struct:__anon7::__anon8
c1	Types.h	/^		int c1;$/;"	m	struct:__anon2::__anon3
c2	Types.h	/^		Coord c2;$/;"	m	struct:__anon7::__anon8
c2	Types.h	/^		int c2;$/;"	m	struct:__anon2::__anon3
cf3Deg	Vec.h	/^float cf3Deg(const Coordf vtx, const Coordf pos1, const Coordf pos2)$/;"	f
cf3Rad	Vec.h	/^float cf3Rad(const Coordf vtx, const Coordf pos1, const Coordf pos2)$/;"	f
cfAbs	Vec.h	/^Coordf cfAbs(const Coordf coord)$/;"	f
cfCfToDeg	Vec.h	/^float cfCfToDeg(const Coordf pos1, const Coordf pos2)$/;"	f
cfCfToRad	Vec.h	/^float cfCfToRad(const Coordf pos1, const Coordf pos2)$/;"	f
cfDist	Vec.h	/^float cfDist(const Coordf coord1, const Coordf coord2)$/;"	f
cfDiv	Vec.h	/^Coordf cfDiv(const Coordf coord, const float num)$/;"	f
cfMag	Vec.h	/^float cfMag(const Coordf coord)$/;"	f
cfMul	Vec.h	/^Coordf cfMul(const Coordf coord, const float num)$/;"	f
cfNeg	Vec.h	/^Coordf cfNeg(const Coordf coord)$/;"	f
cfNormalize	Vec.h	/^Coordf cfNormalize(const Coordf coord)$/;"	f
cfToDeg	Vec.h	/^float cfToDeg(const Coordf coord)$/;"	f
cfToRad	Vec.h	/^float cfToRad(const Coordf coord)$/;"	f
cfTranslate	Vec.h	/^Coordf cfTranslate(const Coordf coord, const Vectorf vec)$/;"	f
charToInt	GetInt.h	/^int charToInt(const char c)$/;"	f
clamp	Coords.h	/^int clamp(const int n, const int min, const int max)$/;"	f
clear	Graphics.h	/^void clear(void)$/;"	f
clearTerminal	DogeUtil.h	/^void clearTerminal(void)$/;"	f
colPolyBb	Collision.h	/^bool colPolyBb(Poly *const p1, Poly *const p2)$/;"	f
color	Poly.h	/^	Color color;$/;"	m	struct:__anon21
colorToU32	Graphics.h	/^u32 colorToU32(const Color c)$/;"	f
coordAdd	Coords.h	/^Coord coordAdd(const Coord coord1, const uint num)$/;"	f
coordClamp	Coords.h	/^Coord coordClamp(const Coord coord, const Range x, const Range y)$/;"	f
coordDistSq	Coords.h	/^uint coordDistSq(const Coord coord1, const Coord coord2)$/;"	f
coordDiv	Coords.h	/^Coord coordDiv(const Coord coord, const int num)$/;"	f
coordInRange	Coords.h	/^bool coordInRange(const Coord coord, const Range range)$/;"	f
coordInRangePair	Coords.h	/^bool coordInRangePair(const Coord coord, const RangePair range)$/;"	f
coordInRect	Coords.h	/^bool coordInRect(const Coord coord, const Rect rect)$/;"	f
coordInv	Coords.h	/^Coord coordInv(const Coord coord)$/;"	f
coordLeast	Coords.h	/^Coord coordLeast(const Coord pos1, const Coord pos2)$/;"	f
coordMax	Coords.h	/^int coordMax(const Coord coord)$/;"	f
coordMaxCoord	Coords.h	/^bool coordMaxCoord(const Coord pos1, const Coord pos2)$/;"	f
coordMin	Coords.h	/^int coordMin(const Coord coord)$/;"	f
coordMinCoord	Coords.h	/^bool coordMinCoord(const Coord pos1, const Coord pos2)$/;"	f
coordMod	Coords.h	/^Coord coordMod(const Coord coord, const int num)$/;"	f
coordMost	Coords.h	/^Coord coordMost(const Coord pos1, const Coord pos2)$/;"	f
coordMul	Coords.h	/^Coord coordMul(const Coord coord, const int num)$/;"	f
coordNz	Coords.h	/^bool coordNz(const Coord coord)$/;"	f
coordOffset	Coords.h	/^Coord coordOffset(const Coord coord, const Offset off)$/;"	f
coordOffsetMul	Coords.h	/^Coord coordOffsetMul(const Coord coord1, const Coord coord2)$/;"	f
coordPairToRect	Coords.h	/^Rect	coordPairToRect(const Coord coord1, const Coord coord2)$/;"	f
coordSame	Coords.h	/^bool coordSame(const Coord pos1, const Coord pos2)$/;"	f
coordShift	Coords.h	/^Coord coordShift(const Coord coord, const Direction dir, const int units)$/;"	f
coordSub	Coords.h	/^Coord coordSub(const Coord coord1, const Coord coord2)$/;"	f
coordWrap	Coords.h	/^Coord coordWrap(const Coord coord, const Range x, const Range y)$/;"	f
coordfDist	Coords.h	/^float coordfDist(const Coordf coord1, const Coordf coord2)$/;"	f
coordfDiv	Coords.h	/^Coordf coordfDiv(const Coordf coord, const float num)$/;"	f
coordfNormalize	Coords.h	/^Coordf coordfNormalize(const Coordf coord)$/;"	f
coordfOffsetMul	Coords.h	/^Coordf coordfOffsetMul(const Coordf coord1, const Coordf coord2)$/;"	f
defaultColor	Graphics.h	/^	Color defaultColor;$/;"	m	struct:__anon16
degInv	Vec.h	/^float degInv(const float deg)$/;"	f
degReduce	Vec.h	/^float degReduce(const float deg)$/;"	f
degToRad	Vec.h	/^float degToRad(const float deg)$/;"	f
dirAXA	Coords.h	/^bool dirAXA(const Direction dir1, const Direction dir2)$/;"	f
dirINV	Coords.h	/^Direction dirINV(const Direction dir)$/;"	f
dirLR	Coords.h	/^Direction dirLR(const Direction dir)$/;"	f
dirNEG	Coords.h	/^Direction dirNEG(const Direction dir)$/;"	f
dirPOS	Coords.h	/^Direction dirPOS(const Direction dir)$/;"	f
dirROL	Coords.h	/^Direction dirROL(const Direction dir)$/;"	f
dirROR	Coords.h	/^Direction dirROR(const Direction dir)$/;"	f
dirUD	Coords.h	/^Direction dirUD(const Direction dir)$/;"	f
draw	Graphics.h	/^void draw(void)$/;"	f
drawCircle	Graphics.h	/^void drawCircle(const uint x, const uint y, const uint radius)$/;"	f
drawCircleCoord	Graphics.h	/^void drawCircleCoord(const Coord pos, const uint radius)$/;"	f
drawHLine	Graphics.h	/^void drawHLine(const uint x, const uint y, int len)$/;"	f
drawImg	Image.h	/^void drawImg(Img *image)$/;"	f
drawLine	Graphics.h	/^void drawLine(const uint x1, const uint y1, const uint x2, const uint y2)$/;"	f
drawLineCoordPair	Graphics.h	/^void drawLineCoordPair(const CoordPair pair)$/;"	f
drawLineCoords	Graphics.h	/^void drawLineCoords(const Coord pos1, const Coord pos2)$/;"	f
drawPixel	Graphics.h	/^void drawPixel(const uint x, const uint y)$/;"	f
drawPixelCoord	Graphics.h	/^void drawPixelCoord(const Coord pos)$/;"	f
drawPoly	Graphics.h	/^void drawPoly(Coord *pos, const uint num)$/;"	f
drawRect	Graphics.h	/^void drawRect(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
drawRectCoords	Graphics.h	/^void drawRectCoords(const Coord pos1, const Coord pos2)$/;"	f
drawSquare	Graphics.h	/^void drawSquare(const uint x, const uint y, const uint len)$/;"	f
drawSquareCoord	Graphics.h	/^void drawSquareCoord(const Coord pos, const uint len)$/;"	f
drawText	Text.h	/^void drawText(uint x, uint y, const char *text)$/;"	f
drawTextCentered	Text.h	/^void drawTextCentered(uint x, uint y, const char *text)$/;"	f
drawTextCenteredCoord	Text.h	/^void drawTextCenteredCoord(const Coord pos, const char *text)$/;"	f
drawTextCoord	Text.h	/^Coord drawTextCoord(const Coord pos, const char *text)$/;"	f
drawTri	Graphics.h	/^void drawTri(const Coord pos1, const Coord pos2, const Coord pos3)$/;"	f
drawVLine	Graphics.h	/^void drawVLine(const uint x, const uint y, int len)$/;"	f
events	Events.h	/^void events(const Ticks frameEnd)$/;"	f
fSameSign	Vec.h	/^bool fSameSign(const float num1, const float num2)$/;"	f
fclamp	Vec.h	/^float fclamp(const float n, const float min, const float max)$/;"	f
fillBorder	Graphics.h	/^void fillBorder(uint x, uint y, uint xlen, uint ylen, int b)$/;"	f
fillBorderCoords	Graphics.h	/^void fillBorderCoords(const Coord pos, const Length len, const int b)$/;"	f
fillCircle	Graphics.h	/^void fillCircle(const uint x, const uint y, const uint radius)$/;"	f
fillCircleCoord	Graphics.h	/^void fillCircleCoord(const Coord pos, const uint radius)$/;"	f
fillHCircle	Graphics.h	/^void fillHCircle(const uint x, const uint y,$/;"	f
fillPoly	Graphics.h	/^void fillPoly(Coord *pos, const uint num)$/;"	f
fillRect	Graphics.h	/^void fillRect(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
fillRectCoords	Graphics.h	/^void fillRectCoords(const Coord pos1, const Coord pos2)$/;"	f
fillScreen	Graphics.h	/^void fillScreen(void)$/;"	f
fillSquare	Graphics.h	/^void fillSquare(const uint x, const uint y, const uint len)$/;"	f
fillSquareCoord	Graphics.h	/^void fillSquareCoord(const Coord pos, const uint len)$/;"	f
fillTri	Graphics.h	/^void fillTri(const Coord pos1, const Coord pos2, const Coord pos3)$/;"	f
finBound	Vec.h	/^bool finBound(const float n, const float min, const float max)$/;"	f
font	Graphics.h	/^	TTF_Font* font;$/;"	m	struct:__anon16
fontColor	Graphics.h	/^	Color fontColor;$/;"	m	struct:__anon16
fontSize	Graphics.h	/^	int fontSize;$/;"	m	struct:__anon16
freeImg	Image.h	/^void freeImg(Img *image)$/;"	f
gcd	Types.h	/^int gcd(const int a, const int b) {$/;"	f
getColor	Graphics.h	/^Color getColor(void)$/;"	f
getInt	GetInt.h	/^int getInt(void)$/;"	f
getR	GetInt.h	/^int getR(const int num)$/;"	f
getTextLength	Text.h	/^Length getTextLength(const char *text)$/;"	f
getTicks	Timing.h	/^Ticks getTicks(void)$/;"	f
getTimeIn	Timing.h	/^Ticks getTimeIn(const uint sec)$/;"	f
getWindowLen	Graphics.h	/^Length getWindowLen(void)$/;"	f
gfx	Graphics.h	/^}gfx = {};$/;"	v	typeref:struct:__anon16
gfx_init	Graphics.h	/^void gfx_init(const uint winXlen, const uint winYlen)$/;"	f
gfx_quit	Graphics.h	/^void gfx_quit(void)$/;"	f
i16	Types.h	/^typedef int16_t			i16;$/;"	t
i32	Types.h	/^typedef int32_t			i32;$/;"	t
i64	Types.h	/^typedef int64_t			i64;$/;"	t
i8	Types.h	/^typedef int8_t			i8;$/;"	t
img_init	Image.h	/^void img_init(void)$/;"	f
img_quit	Image.h	/^void img_quit(void)$/;"	f
inBound	Coords.h	/^bool inBound(const int n, const int min, const int max)$/;"	f
inRange	Coords.h	/^bool inRange(const int n, const Range range)$/;"	f
init	DogeUtil.h	/^void init(const Range win)$/;"	f
input_init	Input.h	/^void input_init(const Length window)$/;"	f
intToChar	GetInt.h	/^char intToChar(const int num)$/;"	f
intToStr	GetInt.h	/^void intToStr(int num, char* str)$/;"	f
key	Input.h	/^	u8 key[SDL_NUM_SCANCODES];$/;"	m	struct:__anon17
keyHeld	Input.h	/^bool keyHeld(const SDL_Scancode key)$/;"	f
keyPressed	Input.h	/^bool keyPressed(const SDL_Scancode key)$/;"	f
keyReleased	Input.h	/^bool keyReleased(const SDL_Scancode key)$/;"	f
keyState	Input.h	/^bool keyState(const SDL_Scancode key)$/;"	f
keys	Input.h	/^}keys = {0};$/;"	v	typeref:struct:__anon17
lint	Types.h	/^typedef long int			lint;$/;"	t
loadDrawImg	Image.h	/^void loadDrawImg(const char *imgFile)$/;"	f
loadImg	Image.h	/^Img* loadImg(const char *imgFile)$/;"	f
main	main.c	/^int main(int argc, char const *argv[])$/;"	f
max	Types.h	/^		Coord max;$/;"	m	struct:__anon7::__anon11
max	Types.h	/^		int max;$/;"	m	struct:__anon2::__anon5
min	Types.h	/^		Coord min;$/;"	m	struct:__anon7::__anon11
min	Types.h	/^		int min;$/;"	m	struct:__anon2::__anon5
mouse	Input.h	/^}mouse = {0};$/;"	v	typeref:struct:__anon18
mouseBtnHeld	Input.h	/^bool mouseBtnHeld(const u32 mouseBtn)$/;"	f
mouseBtnPressed	Input.h	/^bool mouseBtnPressed(const u32 mouseBtn)$/;"	f
mouseBtnReleased	Input.h	/^bool mouseBtnReleased(const u32 mouseBtn)$/;"	f
mouseBtnState	Input.h	/^bool mouseBtnState(const u32 mouseBtn)$/;"	f
mouseScrolled	Input.h	/^bool mouseScrolled(const u32 mouseWheel)$/;"	f
neg	Types.h	/^		Coord neg;$/;"	m	struct:__anon7::__anon12
neg	Types.h	/^		int neg;$/;"	m	struct:__anon2::__anon6
numVertex	Poly.h	/^	uint numVertex;$/;"	m	struct:__anon21
polyBbMinMax	Poly.h	/^CoordPair polyBbMinMax(const Poly p)$/;"	f
polyBbRect	Poly.h	/^Rect polyBbRect(const Poly p)$/;"	f
polyCreate	Poly.h	/^Poly polyCreate(const uint numVertex, ...)$/;"	f
polyDestroy	Poly.h	/^void polyDestroy(const Poly p)$/;"	f
pos	Input.h	/^		Coord pos;$/;"	m	struct:__anon18::__anon19
pos	Input.h	/^	Coord pos;$/;"	m	struct:__anon18
pos	Types.h	/^		Coord pos;$/;"	m	struct:__anon7::__anon12
pos	Types.h	/^		int pos;$/;"	m	struct:__anon2::__anon6
pos1	Types.h	/^		Coord pos1;$/;"	m	struct:__anon7::__anon9
pos2	Types.h	/^		Coord pos2;$/;"	m	struct:__anon7::__anon9
prev	Input.h	/^	u8 prev[SDL_NUM_SCANCODES];$/;"	m	struct:__anon17
prev	Input.h	/^	}prev;$/;"	m	struct:__anon18	typeref:struct:__anon18::__anon19
r	Text.h	/^	Rect r;$/;"	m	struct:__anon20
radMagToCf	Vec.h	/^Coordf radMagToCf(const float rad, const float mag)$/;"	f
radToCf	Vec.h	/^Coordf radToCf(const float rad)$/;"	f
radToDeg	Vec.h	/^float radToDeg(const float rad)$/;"	f
randColor	Colors.h	/^Color randColor(void)$/;"	f
randRange	DogeUtil.h	/^float randRange(float a, float b)$/;"	f
rectToCoordPair	Coords.h	/^CoordPair rectToCoordPair(const Rect rect)$/;"	f
renderer	Graphics.h	/^	SDL_Renderer* renderer;$/;"	m	struct:__anon16
rgbToColor	Colors.h	/^Color rgbToColor(const uint R, const uint G, const uint B)$/;"	f
rgbaToColor	Colors.h	/^Color rgbaToColor(const uint R, const uint G, const uint B, const uint A)$/;"	f
saveScreenshot	Graphics.h	/^void saveScreenshot(const char* file_name)$/;"	f
secondsToTicks	Timing.h	/^Ticks secondsToTicks(const uint sec)$/;"	f
setBlend	Graphics.h	/^void setBlend(const BlendMode mode)$/;"	f
setColor	Graphics.h	/^void setColor(const Color c)$/;"	f
setFontColor	Text.h	/^void setFontColor(Color c)$/;"	f
setFontSize	Text.h	/^void setFontSize(int size)$/;"	f
setRGB	Graphics.h	/^void setRGB(const u8 r, const u8 g, const u8 b)$/;"	f
setRGBA	Graphics.h	/^void setRGBA(const u8 r, const u8 g, const u8 b, const u8 a)$/;"	f
setWindowLen	Graphics.h	/^void setWindowLen(const Length len)$/;"	f
setWindowMode	Graphics.h	/^void setWindowMode(const WindowMode mode)$/;"	f
setWindowResizable	Graphics.h	/^void setWindowResizable(const bool resizable)$/;"	f
setWindowSize	Graphics.h	/^void setWindowSize(const uint x, const uint y)$/;"	f
shiftL	GetInt.h	/^int shiftL(int num, int digits)$/;"	f
shiftR	GetInt.h	/^int shiftR(const int num)$/;"	f
size	Text.h	/^	int size;$/;"	m	struct:__anon20
state	Input.h	/^		u32 state;$/;"	m	struct:__anon18::__anon19
state	Input.h	/^	u32 state;$/;"	m	struct:__anon18
strToInt	GetInt.h	/^int strToInt(const char *str)$/;"	f
text	Text.h	/^	char* text;$/;"	m	struct:__anon20
textColor	Text.h	/^	Color textColor;$/;"	m	struct:__anon20
text_init	Text.h	/^void text_init(void)$/;"	f
text_quit	Text.h	/^void text_quit(void)$/;"	f
u16	Types.h	/^typedef uint16_t			u16;$/;"	t
u32	Types.h	/^typedef uint32_t			u32;$/;"	t
u32ToColor	Graphics.h	/^Color u32ToColor(const u32 u)$/;"	f
u64	Types.h	/^typedef uint64_t			u64;$/;"	t
u8	Types.h	/^typedef uint8_t			u8;$/;"	t
uchar	Types.h	/^typedef unsigned char		uchar;$/;"	t
uint	Types.h	/^typedef unsigned int		uint;$/;"	t
ul	Types.h	/^typedef unsigned long		ul;$/;"	t
ull	Types.h	/^typedef unsigned long long	ull;$/;"	t
vec	Input.h	/^		Offset vec;$/;"	m	struct:__anon18::__anon19
vec	Input.h	/^	Offset vec;$/;"	m	struct:__anon18
vertex	Poly.h	/^	Coord *vertex;$/;"	m	struct:__anon21
wheel	Input.h	/^		u32 wheel;$/;"	m	struct:__anon18::__anon19
wheel	Input.h	/^	u32 wheel;$/;"	m	struct:__anon18
window	Graphics.h	/^	SDL_Window* window;$/;"	m	struct:__anon16
wrap	Coords.h	/^int wrap(const int n, const int min, const int max)$/;"	f
x	Types.h	/^		Coord x;$/;"	m	struct:__anon7::__anon10
x	Types.h	/^		float x;$/;"	m	struct:__anon13::__anon14
x	Types.h	/^		int x;$/;"	m	struct:__anon2::__anon4
xlen	Graphics.h	/^	uint xlen, ylen;$/;"	m	struct:__anon16
y	Types.h	/^		Coord y;$/;"	m	struct:__anon7::__anon10
y	Types.h	/^		float y;$/;"	m	struct:__anon13::__anon14
y	Types.h	/^		int y;$/;"	m	struct:__anon2::__anon4
ylen	Graphics.h	/^	uint xlen, ylen;$/;"	m	struct:__anon16
